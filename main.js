// Provided to you. Do not edit this file
import { Customer } from './Customer.js';
import { Order } from './Order.js';
// BaristaBotAgent will be imported dynamically for each team

class CoffeeShopSimulator {
   constructor(baristaBotClasses, simulationDuration = 60) { // 60 simulated seconds = 1 minute
       this.baristaBotClasses = baristaBotClasses; // Array of student BaristaBotAgent classes
       this.baristaBots = [];
       this.customers = new Map(); // Map: customerId -> Customer object
       this.currentCustomerId = 0;
       this.currentTime = 0;
       this.simulationDuration = simulationDuration;
       this.customerArrivalInterval = 5; // New customer every 5 seconds
       this.lastCustomerArrivalTime = 0;
       this.results = new Map(); // Map: agentId -> { servedCount, missedCount, totalWaitTime }
   }

   async startSimulation() {
       console.log("--- Starting Coffee Shop Simulation ---");

       // Initialize Barista Bots for each team
       this.baristaBotClasses.forEach((BotClass, index) => {
           const bot = new BotClass(`Team${index + 1}`);
           this.baristaBots.push(bot);
           this.results.set(bot.getId(), { servedCount: 0, missedCount: 0, totalWaitTime: 0, totalCustomers: 0 });
       });

       while (this.currentTime < this.simulationDuration) {
           console.log(`\n--- Time: ${this.currentTime} seconds ---`);

           // 1. Generate new customer if it's time
           if (this.currentTime - this.lastCustomerArrivalTime >= this.customerArrivalInterval) {
               this.generateCustomerAndOrder();
               this.lastCustomerArrivalTime = this.currentTime;
           }

           // 2. Remove impatient customers (who haven't been served yet)
           this.customers.forEach(customer => {
               if (!customer.isPatient(this.currentTime) && customer.getOrder() && !customer.getOrder().served) {
                   console.log(`Customer ${customer.getId()} left due to impatience!`);
                   // Mark order as missed for the relevant bot
                   this.baristaBots.forEach(bot => {
                       if (bot.orderQueue.some(o => o.getCustomerId() === customer.getId()) ||
                           (bot.currentlyMaking && bot.currentlyMaking.getCustomerId() === customer.getId())) {
                           bot.missedOrders.push(customer.getOrder());
                       }
                   });
                   this.customers.delete(customer.getId()); // Remove from active customers
               }
           });

           // 3. Each Barista Bot takes a turn
           const allActions = [];
           this.baristaBots.forEach(bot => {
               const actions = bot.onTick(this.currentTime, this.customers);
               allActions.push(...actions);
           });

           // 4. Process actions (e.g., 'serve' actions)
           allActions.forEach(action => {
               if (action.type === 'serve') {
                   const servedOrder = action.order;
                   const customer = this.customers.get(servedOrder.getCustomerId());
                   if (customer) {
                       const waitTime = customer.getTimeWaited(this.currentTime);
                       const botResults = this.results.get(action.order.agentId || 'Unknown'); // Assuming agentId is set on order
                       if (botResults) {
                           botResults.servedCount++;
                           botResults.totalWaitTime += waitTime;
                       }
                       console.log(`  -> Customer ${customer.getId()} served ${servedOrder.getDrinkType()} by ${action.order.agentId || 'Unknown'} in ${waitTime}s.`);
                       this.customers.delete(customer.getId()); // Customer leaves
                   }
               }
           });

           this.currentTime++;
           await new Promise(resolve => setTimeout(resolve, 100)); // Simulate time passing
       }

       this.endSimulation();
   }

   generateCustomerAndOrder() {
       this.currentCustomerId++;
       const customerPatience = Math.floor(Math.random() * 20) + 10; // Patience between 10-30s
       const customer = new Customer(this.currentCustomerId, this.currentTime, customerPatience);

       const drinkTypes = ['coffee', 'tea', 'hot chocolate'];
       const randomDrink = drinkTypes[Math.floor(Math.random() * drinkTypes.length)];
       const order = new Order(customer.getId(), randomDrink);
       customer.setOrder(order);

       this.customers.set(customer.getId(), customer);
       console.log(`New Customer ${customer.getId()} arrived, ordered ${randomDrink}. Patience: ${customerPatience}s.`);

       // Distribute order to a random barista bot (simple "network" distribution)
       const targetBot = this.baristaBots[Math.floor(Math.random() * this.baristaBots.length)];
       order.agentId = targetBot.getId(); // Assign order to a bot
       targetBot.addOrder(order);
   }

   endSimulation() {
       console("\n--- Simulation Ended ---");
       console.log("Final Results:");

       this.baristaBots.forEach(bot => {
           const servedCount = bot.servedOrders.length;
           const missedCount = bot.missedOrders.length;
           const totalCustomersHandled = servedCount + missedCount;
           let totalWaitTime = 0;
           bot.servedOrders.forEach(order => {
               const customer = this.customers.get(order.getCustomerId()); // Re-fetch customer for original arrival time
               if (customer) {
                   totalWaitTime += (order.servedTime - customer.getArrivalTime()); // Assuming servedTime is added on serve
               }
           });

           const avgWaitTime = servedCount > 0 ? (totalWaitTime / servedCount).toFixed(2) : "N/A";
           const satisfactionScore = servedCount / (servedCount + missedCount) * 100 || 0;

           console(`\nBaristaBot ${bot.getId()}:`);
           console(`  Served: ${servedCount}`);
           console(`  Missed (Impatient/Unprocessed): ${missedCount}`);
           console(`  Total Orders Handled: ${totalCustomersHandled}`);
           console(`  Average Wait Time for Served Orders: ${avgWaitTime} seconds`);
           console(`  Customer Satisfaction Rate: ${satisfactionScore.toFixed(2)}%`);
       });

       console.log("\n Competition Summary ");
       // Determine winner based on satisfaction rate
       let winner = null;
       let highestSatisfaction = -1;
       this.baristaBots.forEach(bot => {
           const servedCount = bot.servedOrders.length;
           const missedCount = bot.missedOrders.length;
           const satisfactionScore = servedCount / (servedCount + missedCount) * 100 || 0;
           if (satisfactionScore > highestSatisfaction) {
               highestSatisfaction = satisfactionScore;
               winner = bot.getId();
           }
       });
       if (winner) {
           console(`The WINNER is: ${winner} with a Customer Satisfaction Rate of ${highestSatisfaction.toFixed(2)}%!`);
       } else {
           console("No clear winner or no customers served.");
       }
   }
}
// Run this on your main script
// import { BaristaBotAgent } from './BaristaBotAgent.js';
// const simulator = new CoffeeShopSimulator([BaristaBotAgent]); 
// Pass your extended class here
// simulator.startSimulation();
